
#define VF_ColorIndexMask_Index 0
#define VF_NumTexcoords_Index 1
#define FV_LightMapIndex_Index 2
#define VF_VertexOffset 3


#include "/Engine/Private/VertexFactoryCommon.ush"

/**
 * Vertex attributes to fetch.
 * 定义输入VS的数据布局，需要匹配C++端FVertexFactory里的数据类型。注意这里的顺序和InitRHI里面的顺序一致。
 */
struct FVertexFactoryInput
{
	float4    Position    : ATTRIBUTE0;

	float3    TangentX    : ATTRIBUTE1;
	
	float4    TangentZ    : ATTRIBUTE2;
	
	/** Unique vertex ID. */
	uint VertexId : SV_VertexID;

	uint InstanceId : SV_InstanceID;
};

/**
 * Attributes to interpolate from the vertex shader to the pixel shader.
 * 从VS传递到PS的顶点工厂数据。
 */
struct FVertexFactoryInterpolantsVSToPS
{
	
#if NUM_TEX_COORD_INTERPOLATORS
	float4	TexCoords[(NUM_TEX_COORD_INTERPOLATORS+1)/2]	: TEXCOORD0;
#elif USE_PARTICLE_SUBUVS
	float4	TexCoords[1] : TEXCOORD0;
#endif
	
	half4 Color : COLOR0;
	
	float4 TangentToWorld0:TEXCOORD10_centroid;
	
	float4 TangentToWorld2:TEXCOORD11_centroid;
};

/**
 * Intermediate values computed in the vertex shader.
 * 用于存储将在多个顶点工厂函数中使用的缓存中间数据，比如TangentToLocal
 */
struct FVertexFactoryIntermediates
{
	/** The position of the vertex in translated world space */
	float3 Position;
	
	/** The color of the vertex. */
	half4 Color;

	half3x3 TangentToLocal;
	half3x3 TangentToWorld;
	half TangentToWorldSign;

#if USE_MYINSTANCING
	//因为我们是用Manual Vertex Fetch流程，所以只需要这里从Uniform buffer拿数据即可。
	float4 InstanceOrigin;
	float4 InstanceTransform1;
	float4 InstanceTransform2;
	float4 InstanceTransform3;

#endif	// USE_INSTANCING
	
	uint PrimitiveId;
};


struct FPositionOnlyVertexFactoryInput
{
	float4    Position    : ATTRIBUTE0;
	
	/** Unique vertex ID. */
	uint VertexId : SV_VertexID;
	/** This doesn't use instancing */
	uint InstanceId : SV_InstanceID;

};


struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4    Position    : ATTRIBUTE0;
	float4    Normal        : ATTRIBUTE2;

	/** Unique vertex ID. */
	uint VertexId : SV_VertexID;
	/** This doesn't use instancing */
	uint InstanceId : SV_InstanceID;
};



half3x3 CalcTangentToLocal(FVertexFactoryInput Input, out float TangentSign)
{
	half3x3 Result;

	half3 TangentInputX = Input.TangentX;
	half4 TangentInputZ = Input.TangentZ;
	
	half3 TangentX = TangentBias(TangentInputX);
	half4 TangentZ = TangentBias(TangentInputZ);
	
	TangentSign = TangentZ.w;

	// derive the binormal by getting the cross product of the normal and tangent
	half3 TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;
	
	// Recalculate TangentX off of the other two vectors
	// This corrects quantization error since TangentX was passed in as a quantized vertex input
	// The error shows up most in specular off of a mesh with a smoothed UV seam (normal is smooth, but tangents vary across the seam)
	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}


half3x3 CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates, half3x3 TangentToLocal)
{
	half3x3 LocalToWorld = GetLocalToWorld3x3(Intermediates.PrimitiveId);
	half3 InvScale = GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld); 
}
#if USE_MYINSTANCING
float4x4 GetInstanceTransform(FVertexFactoryIntermediates Intermediates)
{
	return float4x4(
		float4(Intermediates.InstanceTransform1.xyz, 0.0f),
		float4(Intermediates.InstanceTransform2.xyz, 0.0f),
		float4(Intermediates.InstanceTransform3.xyz, 0.0f),
		float4(Intermediates.InstanceOrigin.xyz, 1.0f));
}

float4x4 GetInstanceTransform(FPositionOnlyVertexFactoryInput Input)
{
	uint InstanceId = GetInstanceId(Input.InstanceId);
	return float4x4(
			float4(CustomVF.VertexFetch_InstanceTransformBuffer[3 * (InstanceId ) + 0].xyz, 0.0f),
			float4(CustomVF.VertexFetch_InstanceTransformBuffer[3 * (InstanceId ) + 1].xyz, 0.0f),
			float4(CustomVF.VertexFetch_InstanceTransformBuffer[3 * (InstanceId ) + 2].xyz, 0.0f),
			float4(CustomVF.VertexFetch_InstanceOriginBuffer[InstanceId].xyz, 1.0f));
	
}

float4x4 GetInstanceTransform(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	uint InstanceId = GetInstanceId(Input.InstanceId);
	return float4x4(
			float4(CustomVF.VertexFetch_InstanceTransformBuffer[3 * (InstanceId ) + 0].xyz, 0.0f),
			float4(CustomVF.VertexFetch_InstanceTransformBuffer[3 * (InstanceId ) + 1].xyz, 0.0f),
			float4(CustomVF.VertexFetch_InstanceTransformBuffer[3 * (InstanceId ) + 2].xyz, 0.0f),
			float4(CustomVF.VertexFetch_InstanceOriginBuffer[InstanceId].xyz, 1.0f));
}

half3x3 GetInstanceToLocal3x3(FVertexFactoryIntermediates Intermediates)
{
	return half3x3(Intermediates.InstanceTransform1.xyz, Intermediates.InstanceTransform2.xyz, Intermediates.InstanceTransform3.xyz);
}

float3 GetInstanceOrigin(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.InstanceOrigin.xyz;
}
//
// float2 GetInstanceShadowMapBias(FVertexFactoryIntermediates Intermediates)
// {
// 	return Intermediates.InstanceLightmapAndShadowMapUVBias.zw;
// }
//
// float2 GetInstanceLightMapBias(FVertexFactoryIntermediates Intermediates)
// {
// 	return Intermediates.InstanceLightmapAndShadowMapUVBias.xy;
// }
//
// float GetInstanceSelected(FVertexFactoryIntermediates Intermediates)
// {
// 	return trunc(Intermediates.InstanceTransform1.w * (1.0 / 256.0));;
// }
// float GetInstanceRandom(FVertexFactoryIntermediates Intermediates)
// {
// 	return Intermediates.InstanceOrigin.w;
// }

#endif

half3x3 CalcTangentToWorld(FVertexFactoryIntermediates Intermediates, half3x3 TangentToLocal)
{
#if USE_MYINSTANCING
	half3x3 InstanceToWorld = mul(GetInstanceToLocal3x3(Intermediates), GetLocalToWorld3x3(Intermediates.PrimitiveId));
	// remove scaling
	InstanceToWorld[0] = normalize(InstanceToWorld[0]);
	InstanceToWorld[1] = normalize(InstanceToWorld[1]);
	InstanceToWorld[2] = normalize(InstanceToWorld[2]);
	half3x3 TangentToWorld = mul(TangentToLocal, InstanceToWorld);
#else
	half3x3 TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);
#endif	// USE_MYINSTANCING
	return TangentToWorld;
}


float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}


/**
 * Computes intermediates for the given vertex.
 *
 * @param Input - Vertex attributes.
 *
 * @returns the computed intermediate values.
 */
FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	
	// Build and return the set of intermediates
	FVertexFactoryIntermediates Intermediates;
	Intermediates.Position = Input.Position.xyz;

#if USE_MYINSTANCING
	uint InstanceId = GetInstanceId(Input.InstanceId);
	Intermediates.InstanceTransform1 = CustomVF.VertexFetch_InstanceTransformBuffer[3 * (InstanceId ) + 0];
	Intermediates.InstanceTransform2 = CustomVF.VertexFetch_InstanceTransformBuffer[3 * (InstanceId ) + 1];
	Intermediates.InstanceTransform3 = CustomVF.VertexFetch_InstanceTransformBuffer[3 * (InstanceId ) + 2];
	Intermediates.InstanceOrigin = CustomVF.VertexFetch_InstanceOriginBuffer[InstanceId];
	// Intermediates.InstanceLightmapAndShadowMapUVBias = CustomVF.VertexFetch_InstanceLightmapBuffer[(InstanceId )];
#endif

	float TangentSign;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates, Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetPrimitiveData(Intermediates.PrimitiveId).InvNonUniformScaleAndDeterminantSign.w;

	Intermediates.Color = float4(0, 0, 0, 1);

	
	return Intermediates;
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
#if VF_USE_PRIMITIVE_SCENE_DATA
	return Interpolants.PrimitiveId;
#else
	return 0;
#endif
}


#if NUM_TEX_COORD_INTERPOLATORS || USE_PARTICLE_SUBUVS
float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}

void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex, float2 InValue)
{
	FLATTEN
	if (UVIndex % 2)
	{
		Interpolants.TexCoords[UVIndex / 2].zw = InValue;
	}
	else
	{
		Interpolants.TexCoords[UVIndex / 2].xy = InValue;
	}
}
#endif


/**
 * Computes material parameterss for a given pixel.
 *
 * @param Interpolants - Attributes interpolated from the vertex shader.
 *
 * @returns per-pixel material parameters.
 */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

	// Note that a non-zero texture coordinate is used to prevent the compiler
	// from optimizing out texture lookups that can cause mandatory requirements
	// to not be bound.

#if NUM_MATERIAL_TEXCOORDS
	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}
#endif	//NUM_MATERIAL_TEXCOORDS
	half3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	half4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
	
	Result.TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);
	Result.VertexColor = Interpolants.Color;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);
	Result.TwoSidedSign = 1;
	return Result;
}

/**
 * Computes material parameters for a given vertex.
 *
 * @param Input - Attributes for this vertex.
 * @param Intermediates - Intermediates computed for this vertex.
 * @param WorldPosition - The position of this vertex in world space.
 * @param TangentToLocal - The tangent basis for this vertex.
 *
 * @returns per-vertex material parameters.
 */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;
	Result.TangentToWorld = Intermediates.TangentToWorld;
	Result.PrevFrameLocalToWorld = Primitive.LocalToWorld;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	const uint NumFetchTexCoords = CustomVF.VertexFetch_Parameters[VF_NumTexcoords_Index];
	UNROLL
	for (uint CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		uint ClampedCoordinateIndex = min(CoordinateIndex, NumFetchTexCoords-1);
		Result.TexCoords[CoordinateIndex] = CustomVF.VertexFetch_TexCoordBuffer[NumFetchTexCoords * (CustomVF.VertexFetch_Parameters[VF_VertexOffset] + Input.VertexId) + ClampedCoordinateIndex];
	}
#endif
	
	Result.PrimitiveId = Intermediates.PrimitiveId;
	return Result;
}

/**
 * Computes the world space position of this vertex.
 * 从顶点着色器调用来获得世界空间的顶点位置。
 * @param Input - Vertex attributes.
 * @param Intermediates - Intermediates computed for this vertex.
 *
 * @returns the position of this vertex in world space.
 */
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4 Position = Input.Position;

#if VF_USE_PRIMITIVE_SCENE_DATA
	uint PrimitiveId = Input.PrimitiveId;
#else
	uint PrimitiveId = 0;
#endif
#if USE_MYINSTANCING
	return TransformLocalToTranslatedWorld(mul(Position, GetInstanceTransform(Intermediates)).xyz, PrimitiveId);
#else
	return TransformLocalToTranslatedWorld(Intermediates.Position.xyz);
#endif
}


/** for depth-only pass (slope depth bias) */
float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;
	
#if VF_USE_PRIMITIVE_SCENE_DATA
	uint PrimitiveId = Input.PrimitiveId;
#else
	uint PrimitiveId = 0;
#endif

#if USE_MYINSTANCING
	return TransformLocalToTranslatedWorld(mul(Position, GetInstanceTransform(Input)).xyz, PrimitiveId);
#else
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);
#endif	// USE_INSTANCING
}


/** for depth-only pass */
float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 Position = Input.Position;
	
#if VF_USE_PRIMITIVE_SCENE_DATA
	uint PrimitiveId = Input.PrimitiveId;
#else
	uint PrimitiveId = 0;
#endif

#if USE_MYINSTANCING
	return TransformLocalToTranslatedWorld(mul(Position, GetInstanceTransform(Input)).xyz, PrimitiveId);
#else
	return TransformLocalToTranslatedWorld(Position.xyz, PrimitiveId);
#endif	// USE_INSTANCING
}


float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

// float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
// {
// 	return TranslatedWorldPosition;
// }

void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{
#if VF_USE_PRIMITIVE_SCENE_DATA
	Interpolants.PrimitiveId = PrimitiveId;
#endif
}

void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);
}

/**
 * Constructs values that need to be interpolated from the vertex shader to the pixel shader.
 *
 * @param Input - Vertex attributes.
 * @param Intermediates - Intermediates computed for this vertex.
 *
 * @returns interpolants.
 */
FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;

#if NUM_TEX_COORD_INTERPOLATORS
	float2 CustomizedUVs[NUM_TEX_COORD_INTERPOLATORS];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);
	
	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}

#elif NUM_MATERIAL_TEXCOORDS_VERTEX == 0 && USE_PARTICLE_SUBUVS
	SetUV(Interpolants, 0, CustomVF.VertexFetch_TexCoordBuffer[CustomVF.VertexFetch_Parameters[VF_NumTexcoords_Index] * (CustomVF.VertexFetch_Parameters[VF_VertexOffset] + Input.VertexId)]);

#endif

	Interpolants.Color = Intermediates.Color;
	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetPrimitiveId(Interpolants, Intermediates.PrimitiveId);
	return Interpolants;
}


uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return GetPrimitiveId(Interpolants);
}

/**
 * Computes the position of this vertex last frame in world space.
 *
 * @param Input - Vertex attributes.
 * @param Intermediates - Intermediates computed for this vertex.
 *
 * @returns the previous position of this vertex in world space.
 */
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return VertexFactoryGetWorldPosition(Input, Intermediates);
}

/**
 * Computes the tangent basis for this vertex in world space.
 *
 * @param Input - Vertex attributes.
 * @param Intermediates - Intermediates computed for this vertex.
 *
 * @returns the tangent basis for this vertex in world space.
 */
float3x3 VertexFactoryGetTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToLocal;
}


float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	//return float3(0, 0, 1);
	return Intermediates.TangentToWorld[2];
}

float3 VertexFactoryGetWorldNormal(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	return Input.Normal.xyz;
}


float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
#if USE_PARTICLE_POSITION
	return Interpolants.ParticleTranslatedWorldPositionAndSize;
#endif
	return 0;
}